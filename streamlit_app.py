# -*- coding: utf-8 -*-
"""streamlit_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TnigFZ76AcFdeD4xGy1_zPVljpioWDES
"""

# streamlit_app.py
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder, StandardScaler, PowerTransformer
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE

@st.cache_resource
def load_model_and_features():
    # Load and preprocess data
    df = pd.read_csv('parkinsons_disease_data.csv')
    df.drop_duplicates(inplace=True)
    df.drop("DoctorInCharge", axis=1, inplace=True)
    df.drop("PatientID", axis=1, inplace=True)

    numerical_columns = [
        'Age', 'BMI', 'SystolicBP', 'DiastolicBP', 'CholesterolTotal',
        'CholesterolLDL', 'CholesterolHDL', 'CholesterolTriglycerides', 'UPDRS',
        'MoCA', 'FunctionalAssessment'
    ]

    categorical_columns = [
        'Gender', 'Ethnicity', 'EducationLevel', 'Smoking', 'AlcoholConsumption',
        'PhysicalActivity', 'DietQuality', 'SleepQuality', 'FamilyHistoryParkinsons',
        'TraumaticBrainInjury', 'Hypertension', 'Diabetes', 'Depression', 'Stroke',
        'Tremor', 'Rigidity', 'Bradykinesia', 'PosturalInstability', 'SpeechProblems',
        'SleepDisorders', 'Constipation'
    ]

    # Remove outliers using IQR
    for col in numerical_columns:
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]

    # Normalize skewed data
    pt = PowerTransformer(method='yeo-johnson')
    for col in numerical_columns:
        if abs(df[col].skew()) > 0.5:
            df[col] = pt.fit_transform(df[col].values.reshape(-1, 1))

    # Encode categoricals
    label_encoders = {}
    for col in categorical_columns:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])
        label_encoders[col] = le

    # Standardize numerical features
    scaler = StandardScaler()
    df[numerical_columns] = scaler.fit_transform(df[numerical_columns])

    # Split data
    X = df.drop("Diagnosis", axis=1)
    y = df["Diagnosis"]

    sm = SMOTE(random_state=300)
    X_resampled, y_resampled = sm.fit_resample(X, y)

    X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

    # Train model
    model = RandomForestClassifier()
    model.fit(X_train, y_train)

    return model, numerical_columns, categorical_columns, scaler, label_encoders


# Streamlit UI
st.title("üß† Parkinson‚Äôs Disease Prediction App")

st.write("Enter the values for each feature below:")

# Load cached model and column names
model, numerical_columns, categorical_columns, scaler, label_encoders = load_model_and_features()

st.subheader("Enter your medical and demographic information below:")

feature_names = [ 'Age', 'Gender', 'Ethnicity', 'EducationLevel', 'BMI',
       'Smoking', 'AlcoholConsumption', 'PhysicalActivity', 'DietQuality',
       'SleepQuality', 'FamilyHistoryParkinsons', 'TraumaticBrainInjury',
       'Hypertension', 'Diabetes', 'Depression', 'Stroke', 'SystolicBP',
       'DiastolicBP', 'CholesterolTotal', 'CholesterolLDL', 'CholesterolHDL',
       'CholesterolTriglycerides', 'UPDRS', 'MoCA', 'FunctionalAssessment',
       'Tremor', 'Rigidity', 'Bradykinesia', 'PosturalInstability',
       'SpeechProblems', 'SleepDisorders', 'Constipation']

input_data = []

for feature in feature_names:
    val = st.number_input(f"{feature}", min_value=-1000.0, value=0.0, step=0.01)
    input_data.append(val)

if st.button("Predict"):
    input_df = pd.DataFrame([input_data], columns=feature_names)

    # Scale numerical columns only
    input_df[numerical_columns] = scaler.transform(input_df[numerical_columns])

    # Predict
    prediction = model.predict(input_df)[0]
    probability = model.predict_proba(input_df)[0][1]

    # Output
    if prediction == 1:
        st.error("‚ö†Ô∏è Likely Parkinson‚Äôs Disease detected.")
    else:
        st.success("‚úÖ Unlikely to have Parkinson‚Äôs Disease.")

    st.info(f"üßÆ Model confidence: {probability:.2%}")
